// Code generated by mockery v2.40.2. DO NOT EDIT.

package wsservermocks

import (
	context "context"

	wsserver "github.com/hyperledger/firefly-common/pkg/wsserver"
	mock "github.com/stretchr/testify/mock"
)

// Protocol is an autogenerated mock type for the Protocol type
type Protocol struct {
	mock.Mock
}

// Broadcast provides a mock function with given fields: ctx, stream, payload
func (_m *Protocol) Broadcast(ctx context.Context, stream string, payload interface{}) {
	_m.Called(ctx, stream, payload)
}

// RoundTrip provides a mock function with given fields: ctx, stream, payload
func (_m *Protocol) RoundTrip(ctx context.Context, stream string, payload wsserver.WSBatch) (*wsserver.WebSocketCommandMessage, error) {
	ret := _m.Called(ctx, stream, payload)

	if len(ret) == 0 {
		panic("no return value specified for RoundTrip")
	}

	var r0 *wsserver.WebSocketCommandMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, wsserver.WSBatch) (*wsserver.WebSocketCommandMessage, error)); ok {
		return rf(ctx, stream, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, wsserver.WSBatch) *wsserver.WebSocketCommandMessage); ok {
		r0 = rf(ctx, stream, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wsserver.WebSocketCommandMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, wsserver.WSBatch) error); ok {
		r1 = rf(ctx, stream, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProtocol creates a new instance of Protocol. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProtocol(t interface {
	mock.TestingT
	Cleanup(func())
}) *Protocol {
	mock := &Protocol{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
